pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
-- game loop and inits
function _init()
  plr = {}
  plr.x = 7*8
  plr.y = 8*8
  plr.flip = true
  plr.sprite = 1
  plr.speed = 1
  plr.moving = false
  plr.angle = 0
  
  box = {}
  box.dbg = false
  box.sx = 32
  box.sy = 32
  box.x1 = box.sx
  box.x2 = 128-box.x1
  box.y1 = box.sy
  box.y2 = 128-box.y1
  box.cx = 0
  box.cy = 0
  box.ab_offs = 2
  
  duck = {}
  duck.x = 270
  duck.y = 56
  duck.s = 48
  
  owl = {}
  owl.x = 208
  owl.y = 52
  owl.s = 50
  
  music(0, 1000, 7)
  menuitem(1, "toggle debug", function() set_debug() end)
end

function set_debug()
  box.dbg = not box.dbg
  if box.dbg then 
    for i=0,63 do
     for j=0,15 do
       printh(i..","..j.."="..mget(i,j)) 
       if mget(i,j) == 32 then mset(i,j,61) 
       elseif mget(i,j) == 61 then mset(i,j,32) end
       if mget(i,j) == 33 then mset(i,j,45) 
       elseif mget(i,j) == 45 then mset(i,j,33) end
       if mget(i,j) == 34 then mset(i,j,60) 
       elseif mget(i,j) == 60 then mset(i,j,34) end
       if mget(i,j) == 35 then mset(i,j,44) 
       elseif mget(i,j) == 44 then mset(i,j,35) end
       if mget(i,j) >= 16 and mget(i,j) <=26 then mset(i,j,43) 
       elseif mget(i,j) == 43 then mset(i,j,16) end
     end
    end
  end
end

function _update()
  move_player()
end


function _draw()
  cls()
  -- back trees
  camera(0,0)
  pal(2, 1)
  pal(1, 0)
  map(10, 47, 10-flr(box.cx/3), 0, 47, 16)
  pal()
  
  -- fore trees
  camera(0,0)
  map(0, 47, 40-flr(box.cx/2), 0, 47, 16)
  
  -- owl in fore trees
  palt(0, false)
  palt(5, true)
  spr(owl.s, owl.x-flr(box.cx/2), owl.y)
  pal()
    
  -- map
  camera(box.cx, box.cy)
  map(0,0,0,0,128,128)
  
  -- duck
  spr(duck.s, duck.x, duck.y, 1, 1, plr.x + box.cx > duck.x)
  if plr.x + box.cx == duck.x then
    sfx(4)
    mset(4,14,52)
  end

  camera(0, 0)
  
  --player
  if box.dbg then
    draw_dbg_outline()
    get_bg_tile()
    --get_floor_tile()
    --get_face_tile()
    --get_front_tile()
    --get_foot_tile()
    --get_heel_tile()
  else
    --spr(plr.sprite, plr.x, plr.y, 1, 1, plr.flip)
    rspr4(plr.sprite, 1, 1, 
          plr.flip, false,
          4, 4,
          plr.x+4, plr.y+4, 
          plr.angle, 0)
  end
end
-->8
function moveanim()
  plr.moving = true
  plr.sprite += 1
  if plr.sprite > 5 then
    plr.sprite = 1
  end
end

function draw_dbg_outline()
  print("x: "..plr.x.." y: "..plr.y, 2, 2, 7)
  print("cx: "..box.cx.." cy: "..box.cy, 2, 8, 3)
  rect(box.x1, box.y1, 
       box.x2, box.y2, 3)
  -- player center
  local px, py = plr.x+4, plr.y+4

  -- left(a) and right(b) 
  -- floor colliions
  -- these start at y and not y+4
  -- otherwise the move section has
  -- to first lift the player (eg. 8)
  -- and then drop them again
  local offs=box.ab_offs
  local ax1,ay1 = plr.x+1, plr.y+offs
  local ax2,ay2 = plr.x+1, plr.y+7
  local bx1,by1 = plr.x+6, plr.y+offs
  local bx2,by2 = plr.x+6, plr.y+7
  line(ax1, ay1, ax2, ay2, 3)
  line(bx1, by1, bx2, by2, 11)
  
  -- left (e) and right (f)
  -- wall collision
  local ex1,ey1 = px-1, py
  local ex2,ey2 = plr.x+1, py
  local dx1,dy1 = px+1, py
  local dx2,dy2 = plr.x+6, py
  line(ex1, ey1, ex2, ey2, 14)
  line(dx1, dy1, dx2, dy2, 8)
  
  pset(px-1, py, 7)
  pset(px, py-1, 7)   
  pset(px, py+1, 7)
  pset(px+1, py, 7)
end

function get_down_collision(name, px, py)
  printh(name.." get_down_collision x="..px.." y="..py)
  -- adjust for camera
  px += box.cx
  py += box.cy
  -- lift player a bit to ensure
  -- they can get over the a slope
  -- hump
  local lift = 2
  py -= lift
  -- how far down to start
  local offs = box.ab_offs
  -- trace line to check coll on
  local x1,y1 = px,py+offs
  local x2,y2 = px,py+7
  -- start
  local x,y = x1,y1
  -- result
  local rv = y-y1
  printh("px="..px.." py="..py)
  printh("x1="..x1.." y1="..y1.." x2="..x2.." y2="..y2)

  repeat
    -- fetch map sprites and
    -- account for camera offset
    local i,j=flr(x/8),flr(y/8)
    local s = mget(i,j)
    printh(name.."="..rv.." x="..x.." %8="..(x%8).." 8-%8="..(8-(x%8)).." y="..y.." i="..i.." j="..j.." s="..s.." fl="..fget(s))
    --if fget(s, 3) then
    if fget(s, 2) and fget(s, 3) then
      -- left slope _/
      printh("left slope a="..y.."-"..y2.."+"..(8-(x%8)).."="..(y-y2+(8-(x%8))))
      rv += (8-(x%8)) 
    elseif fget(s, 4) and fget(s, 3) then
      -- right slope \_
      printh("right slope a="..y.."-"..y2.."+"..(x%8).."="..(y-y2+(x%8)))
      rv += (x%8)
    elseif fget(s, 3) then
      --rv = y-y1
      printh("not slope "..name.."="..rv)
      -- scan floor sprite for
      -- empty pixels and bind
      -- to ground
      for z=0,7 do
        local sx=flr(s*8 % 128) + x%8
        local sy=flr(s/16) * 8 + z
        local c=sget(sx, sy)
        printh(name.." sx="..sx.." sy="..sy.." z="..z.." c="..c)
        if c == 0 then
          rv += 1
          printh(name.."="..rv)
        else
          --i need to account for
          --the existing y into the tile
          --position...
          --rv -= offs
          break
        end
      end
    else
      rv += 1
    end
    if fget(s, 3) then
      break
    end
    y += 1
  until y==18*8
  
  -- offset the height of the sprite
  -- to get pixels under feet
  printh(name.."="..rv.." adj="..(8-offs))
  rv -= 8-offs + lift
  printh(name.." down = "..rv)
  return rv
end

-- returns two distances to 
-- "floor" using the ab sensors
-- the min value should be used
-- to move the character up
-- or down
function get_ab_collisions()
  printh("\nget_ab_collisions")
  local a=get_down_collision("a", plr.x+1, plr.y)
  local b=get_down_collision("b", plr.x+6, plr.y)
  local angle=atan2(5, b-a)
  printh("angle "..(b-a).."="..angle)
  return a,b,angle
end

function get_bg_tile()
  local x = plr.x + box.cx + 4
  local y = plr.y + box.cy + 4
  local i,j = flr(x/8),flr(y/8)
  local sprite = mget(i, j)
  pset(plr.x+4, plr.y+4, 12)
  print("bg: "..i..","..j.."="..sprite, 2, 14)
  return sprite
end

function get_floor_tile()
  local x = plr.x + box.cx + 4
  local y = plr.y + box.cy + 8
  local i,j=flr(x/8),flr(y/8)
  local sprite = mget(i,j)
  pset(plr.x+4, plr.y+8, 8)
  print("flr: "..i..","..j.."="..sprite, 70, 18)
  return sprite
end

function get_face_tile()
  local offs = 8
  local x = plr.x + box.cx + 8
  local y = plr.y + box.cy - offs
  local i,j=flr(x/8),ceil(y/8)
  if plr.flip then
    local x = plr.x + box.cx - 1
    i,j=flr(x/8),ceil(y/8)
    pset(plr.x-1, plr.y-offs+8, 8)
  else
    pset(plr.x+8, plr.y-offs+8, 8)
  end 
  local sprite = mget(i,j)
  print("face: "..i..","..j.."="..sprite, 70, 0)

  return sprite
end

function get_front_tile()
  local offs=5
  local x = plr.x + box.cx + 8
  local y = plr.y + box.cy - offs
  local i,j=flr(x/8),ceil(y/8)

  if plr.flip then
    local x = plr.x + box.cx - 1
    i,j=flr(x/8),ceil(y/8)
    pset(plr.x-1, plr.y-offs+8, 12)
  else
    pset(plr.x+8, plr.y-offs+8, 12)
  end 
  local sprite = mget(i,j)
  print("front: "..i..","..j.."="..sprite, 64, 6)

  return sprite
end

function get_foot_tile()
  local x = plr.x + 8
  local y = plr.y + 7
 
  if plr.flip then
    x = plr.x + 0
  end
  
  pset(x, y, 10)
  
  x += box.cx
  y += box.cy
  
  local i,j = flr(x/8),ceil(y/8)
  local sprite = mget(i,j)
  print("foot: "..i..","..j.."="..sprite, 64, 12)

  return sprite
end

function get_heel_tile()
  local x = plr.x + 0
  local y = plr.y + 7

  if plr.flip then
    x = plr.x + 8
  end
  pset(x, y, 10) 

  x += box.cx
  y += box.cy

  local i,j = flr(x/8),ceil(y/8)
  local sprite = mget(i,j)
  print("heel: "..i..","..j.."="..sprite, 70, 24)

  return sprite
end

-->8
-- player dynamics
function move_player()
  plr.moving = false
  -- save pos in case of collision
  local ox = plr.x 
  local oy = plr.y
  
  -- left
  if btn(0) then
    plr.x -= plr.speed
    plr.flip = true
    if plr.x < -10 then 
      plr.x = 128
    end
  end

  -- right
  if btn(1) then
    plr.x += plr.speed
    plr.flip = false
    if plr.x > 128 then
      plr.x = -10
    end
  end
  
  -- up
  if btn(2) then
    sfx(2, 3)
    plr.y -= plr.speed
  end

  -- down
  if btn(3) then
    sfx(3, 3)
    plr.y += plr.speed
  end
  
  local front = get_front_tile()
  if fget(front, 0) then
    plr.x = ox
    plr.y = oy
  end
  
  -- =====================
  -- camera box management
  -- bind player to box x
  -- and pull box
  if plr.x < box.x1 then
    plr.x = box.x1
    box.cx -= 1
  elseif plr.x > box.x2-8 then
    plr.x = box.x2-8
    box.cx += 1
  end
  
  -- bind player to box y
  -- and pull box (or not)
  if false then
		  if plr.y < box.y1 then
		    plr.y = box.y1
		    box.cy -= 1
		  elseif plr.y > box.y2-8 then
		    plr.y = box.y2 -8
		    box.cy += 1
		  end
  end
  
  -- extend box if in the map
  -- corners
  -- for x, 64 = width of map in tiles
  if box.cx <= 0 then
    box.cx = 0
    box.x1 = 0
  elseif box.cx >= 64 * 8 - 128 then
    box.cx = 64 * 8 - 128
    box.x2 = 64 * 8 - 128 -1
  else
    box.x1 = box.sx
    box.x2 = 128-box.sx
  end
  
  -- for y, 19 = height of map in tiles
  if box.cy <= 0 then
    box.cy = 0
    box.y1 = 0
  elseif box.cy >= 19 * 8 - 128 then
    box.cy = 19 * 8 - 128
    box.y2 = 19 * 8
  else
    box.y1 = box.sy
    box.y2 = 128-box.sy
  end
  
  -- floor sensor (ab) collision
  if (btn(0) or btn(1)) then
    -- ab collision starts
    -- at top of sprite, so 
    -- we lift the sprite
    -- first to "climb"... this
    -- is for future half-map tile
    --plr.y -= 4
    local a,b,angle=get_ab_collisions()
    plr.angle=angle
    plr.y += min(a,b)
  end
          
  if btn(0) or btn(1) or btn(2) or btn(3) or btn(4) then
    moveanim()
  end
  

  if not plr.moving then
    plr.sprite = 1
  end
end
-->8
-- draw a rotated sprite:
--  located at tile (i ,j) in spritesheet, at (x, y) px on screen,
--  spanning on w tiles to the right, h tiles to the bottom
--  (like spr, w and h may be fractional to allow partial sprites, although not tested),
--  optionally flipped on x and y with flags flip_x and flip_y,
--  offset by -(pivot_x, pivot_y) and rotated by angle around this pivot,
--  ignoring transparent_color.
-- it mimics native spr() and therefore doesn't use pico-boots math vectors.
-- unlike spr() though, it takes sprite location coords i, j as first arguments
--  instead of sprite id n, but conversion is trivial.
-- adapted from jihem's spr_r function for "rotating a sprite around its center"
-- https://www.lexaloffle.com/bbs/?pid=52525
-- changes:
-- - replaced 8 with tile_size for semantics (no behavior change)
-- - w and h don't default to 1 since we use this function with sprite_data which already defaults span to (1, 1)
-- - angle is passed directly as pico-8 angle between 0 and 1 (no division by 360, counter-clockwise sign convention)
-- - support flipping
-- - support custom pivot (instead of always rotating around center)
-- - support transparent_color
-- - draw pixels even the farthest from the pivot (e.g. square corner to opposite corner)
--   by identifying target disc
-- - fixed yy<=sh -> yy<sh to avoid drawing an extra line from neighbor sprite
function rspr4(s, w, h, 
               flip_x, flip_y, 
               pivot_x, pivot_y, 
               x, y, 
               angle, transparent_color)
  -- to spare tokens, we don't give defaults to all values like angle = 0 or transparent_color = 0
  --  user should call function with all parameters; if not using angle, we recommend spr()
  --  to reduce cpu


 
  -- precompute pixel values from tile indices: sprite source top-left, sprite size
 local sx=flr(s*8)%128
 local sy=flr(s/16)*8 
  local sw = 8 * w
  local sh = 8 * h

  -- precompute angle trigonometry
  local sa = sin(angle)
  local ca = cos(angle)

  -- in the operations below, we work "inside" pixels as much as possible (offset 0.5 from top-left corner)
  --  then floor coordinates (or let pico-8 functions auto-floor) at the last moment for more symmetrical results
  -- if we work with integers directly, pivot used for rotation and flipping is
  --  inside a pixel not at the cross between 4 pixels (what pico-8 spr flip uses),
  --  causing a slight offset
  -- typical example: flipping a square sprite of span (1, 1) i.e. size (8, 8) and pivot (4, 4)
  --  will preserve its bounding box; same for a 90-degrees rotation

  -- precompute "target disc": where we must draw pixels of the rotated sprite (relative to (x, y))
  -- the image of a rectangle rotated by any angle from 0 to 1 is a disc
  -- when rotating around its center, the disc has radius equal to rectangle half-diagonal
  -- when rotating around an excentered pivot, the disc has a bigger radius, equal to
  --  the distance between the pivot and the farthest corner of the sprite rectangle
  --  i.e. the magnitude of a vector of width: the biggest horizontal distance between pivot and rectangle left or right
  --                                    height: the biggest vertical distance between pivot and rectangle top or bottom
  -- (if pivot is a corner, it is the full diagonal length)
  -- we need to compute this disc radius so we can properly draw the rotated sprite wherever it will "land" on the screen
  -- (if we just draw on the rectangle area where the sprite originally is, we observe rectangle clipping)
  -- actually measure distance between pivot and edge pixel center, so pivot vs 0.5 (start) or sw - 0.5 (end)
  local max_dx = max(pivot_x, sw - pivot_x) - 0.5  -- actually (pivot_x - 0.5, sw - 0.5 - pivot_x) i.e. max horizontal distance from pivot to corner
  local max_dy = max(pivot_y, sh - pivot_y) - 0.5  -- actually (pivot_y - 0.5, sh - 0.5 - pivot_y) i.e. max vertical distance from pivot to corner
  local max_sqr_dist = max_dx * max_dx + max_dy * max_dy
  -- ceil to be sure we reach enough pixels while avoiding fractions
  -- subtract half for symmetrical operations, it's very important as it will affect
  --  the values of dx and dy during the whole iteration
  local max_dist_minus_half = ceil(sqrt(max_sqr_dist)) - 0.5

  -- backward rendering: cover the whole target disc,
  --  and determine which pixel of the source sprite should be represented
  -- it's not trivial to iterate over a disc (you'd need trigonometry)
  --  so instead, iterate over the target disc's bounding box
  -- we work with relative offsets
  for dx = - max_dist_minus_half, max_dist_minus_half do
    for dy = - max_dist_minus_half, max_dist_minus_half do
      -- optimization: we know that nothing should be drawn outside the target disc contained in the bounding box
      --  so only consider pixels inside the target disc
      -- the final source range check more below is the most important
      if dx * dx + dy * dy <= max_sqr_dist then
        -- prepare flip factors
        local sign_x = flip_x and -1 or 1
        local sign_y = flip_y and -1 or 1
        -- compute pixel location on source sprite in spritesheet
        -- this basically a reverse rotation matrix to find which pixel
        --  on the original sprite should be represented

        -- known issue: luamin will remove brackets from expression a + b * (c + d)
        -- so make sure to store b * (c + d) in an intermediate variable
        -- https://github.com/mathiasbynens/luamin/issues/50
        local rotated_dx = sign_x * ( ca * dx + sa * dy)
        local rotated_dy = sign_y * (-sa * dx + ca * dy)

        -- spare a few tokens by not flooring xx and yy
        --  we should semantically, but fortunately sget does auto-floor arguments
        local xx = pivot_x + rotated_dx
        local yy = pivot_y + rotated_dy

        -- make sure to never draw pixels from the spritesheet
        --  that are outside the source sprite
        -- simply check if the source pixel is located in the source sprite rectangle
        if xx >= 0 and xx < sw and yy >= 0 and yy < sh then
          -- get source pixel
          local c = sget(sx + xx, sy + yy)
          -- ignore if transparent color
          if c ~= transparent_color then
            -- set target pixel color to source pixel color
            -- spare a few tokens by not flooring dx and dy, as pset also auto-floors arguments
            pset(x + dx, y + dy, c)
          end
        end
      end
    end
  end
end
__gfx__
00000000000000000440440004404400044044000000000000000000000000000000000100000000111121221111111211122212111111221111111211111112
00000000044044000040040000400400004004000440440000000000000000002211021000000000111111121111121211222112111111121121111211111112
00700700004004000044444000444440004444400040040000000000210000000001110022000000121111121111112012112112111111221211112011211112
00077000004444400418181404181814041818140044444000000020021221120001000001112000111111221111112012112212111211121211112011121120
00077000041818140044444000444440004444400418181402122010001100010211000000100211111111121111112012112112111121121111112011112120
00700700004444400044440000444400004444000044444021100100000100000100000001000001121111221111212011221112111121121121111211112120
00000000000404000040040000400400004004000004440020010000000010000000000001000000111111121111112011122112111112121111111211111122
00000000004404400040004004000400040040000040400000010000000000000000000000000000111111121111111211111112111111221121111211121122
bb33b3b33b3b3bb33bb3333b44494444949449444449449445496454964544544d44996d6d56556d556d56650000000000000000000000000000000000000000
33b3434b3434b33bb33b34b49444494444494444444494496454964649646645d56454d5d56656d556d555660000000000000000000000000000000000000000
4343b4343343443444343b4349444494f944449449444944556445d644556d5666d5645566d56655556556560000000000000000000000000000000000000000
34443443444433443344444444f94449944f94449449449455555455554565555555655455556556565555560000000000000000000000000000000000000000
449349444494444944b9449494944944444944444944444455655556565555565555556555555565556d5d5d00000000000000000000000000000000000b3000
44494444944444444434944444494444944449444444944965d656556d555655556556d5556556d5d5d565660000000000000000000000000000000000b33330
494444944449449444944449f94444944944449444944494d555556656556d5556d6556556d65565655566d5000000000000000000000000003bb3b0033b43b0
944494444944494449444944944494444449444949444444555655d55d6555655555555d6555565d6d55565500000000000000000000000003b44bb33b39433b
00003b33b3b30000000036336363000036363663366333364944495496444949356d56656d56556d000000008888888880000000b00000000000000000000000
0003b4b4439b300000036565539630003434633663663664445444464969444456d55566d56656d50000000080000008280000003b0000000000000000000000
0033434b4434330000335356553533003343553444343643944944d644556d493465565666d5665500000000800000080280000003b000000000000000000000
0bb3344334433bb00663355335533660455433553355454449495455554565495655555635456556000000008000000800280000003b00000000000000000000
0434394444934340053539555593535055545559555955544465555656555554536d5d5d345555650000000080000008000280000003b0000000000000000000
b4439444444934bb6553955555593556945544445434946665d656556d555655d4d56566b36556d500000000800000080000280000003b000000000000000000
394444944944449459555595595555954559449444945555d555556656556d55645566d536d65565000000008000000800000280000003b00088888000000000
444944499444944b55595559955595554544494449644944555655d55d6555653d5556556455565d0000000088888888000000280000003b0800000800000000
00faa0000999399455255255049400000444400000000000000000000000000000000000000000000000000000000000000000080000000b0000000000000000
00a81a0093393b995525525504940000029294400000000000000000000000000000000000000000000000000000000000000082000000b30000000000000000
99a1a0009bbbbbb9552222550494000002929240000000000000000000000000000000000000000000000000000000000000082000000b300000000000000000
09aaa00099bbbbb352080825049400000292924000000000000000000000000000000000000000000000000000000000000082000000b3000000000000000000
000aa00a49999b995201012504940000029292400000000000000000000000000000000000000000000000000000000000082000000b30000000000000000000
00aaaaaa00099400521040250494400002929240000000000000000000000000000000000000000000000000000000000082000000b300000000000000000000
00aaaa000009940052010125049400000292944000000000000000000000000000000000000000000000000000000000082000000b3000000000000000000000
004a4000000099405522225504940000044440000000000000000000000000000000000000000000000000000000000082000000b30000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a080
00e000000000d00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00a0d08000f000000080e00000e07000a0d08000f000000080e00000e00000a0d08000f000000080e00000e00000a0d08000f000000080e00000e00000a0d080
00f000000080e00000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f000
00e000000000e07000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a000
00c070000060a00000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a080
00e000000000d00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a000
00c070000060a00000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a080
00e000000000d00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80e0f00000e060000000c00000b00080e0f00000e060000000c00000b00080e0f00000e060000000c00000b00080e0f00000e060000000c00000b00080e0f000
00e060000000c00000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00b0d00070d000000000e00080a00000b0d00070d000000000e00080a00000b0d00070d000000000e00080a00000b0d00070d000000000e00080a00000b0d000
70d000000000e00080a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00a0d08000f000000080e00000e07000a0d08000f000000080e00000e00000a0d08000f000000080e00000e00000a0d08000f000000080e00000e00000a0d080
00f000000080e00000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f00000e000000000e07000f00060c0f000
00e000000000e07000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a00000c070000060a00000b00000f0a000
00c070000060a00000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a08000e000000000d00000c00000d0a080
00e000000000d00000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0e00000e000000000e00080d00000d0e00000e000000000e00080d00000d0e00000e000000000e00080d00000d0e00000e000000000e00080d00000d0e000
00e000000000e00080d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70f0e00070d080000080e00000e00070f0e00070d080000080e00000e00070f0e00070d080000080e00000e00070f0e00070d080000080e00000e00070f0e000
70d080000080e00000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00e0d00000f000000000a00060e00000e0d00000f000000000a00060e00000e0d00000f000000000a00060e00000e0d00000f000000000a00060e00000e0d000
00f000000000a00060e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00e0f00000b000000000f00000d00000e0f00000b000000000f00000d00000e0f00000b000000000f00000d00000e0f00000b000000000f00000d00000e0f000
00b000000000f00000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
00000000000000000000000000000000090909090909090909090900000008080c180c180808090909090009181808000000000100000000000000000c0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002224172800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222626192900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000001f0000000000001e000000000000000000000000000000000000000022152626192800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000002011101011121111121112210000002010111200000000000000000000002224242424171900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000002012210000000000000000201011122100000000201313131315151313131313132100000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000221213141521000031000000000000000000000000201315131315141414151510121112210000000000000000000000000000201713151317191a1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000022241115131415111211122100001e0000001f0000201213131513131313131414131313131514210000000000000000000000002025171517171a191a1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
002215131415261727271414141112111012101210111226271314151514131514141514151314151012210000000000000000000022172617171a1a1a1a191a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00151415152600000000171618161717271414261a2727171914132713131314131513131315131515141521000000000022252424271616161a1a191a171a1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000003300002619001a1919191a191927261a1919191919191919192727181313171317131326261715261211101225242425241a1819271a19191a1a171900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
26191918181a1a1a19001a1a191a1a191a191a191a1919191a191a191a191a191a1a191a19191a191a1a191a271515151a191a191a191a191a191a191a1a1a1900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
011000200003300000000000000000033000000000000000000330000000000000000003300000000000000000033000000000000000000330000000000000000003300000000000000000033000000000000000
051000203f200000433f2002721500033306150c000000000c000000430000027215272152461500000000430c0000004300000000333f200246153f200274153f20000043000003321533200246150004333415
00080000090170a0500b0500b05009050080500505005050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800000c0170f050070500d0500e050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010700001834024250300500c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
03 01424344

