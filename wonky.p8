pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
-- game loop and inits
function _init()
  plr={
    x=7*8,
    y=7*8,
    w=7,
    h=8,
    flipped=true,
    s=1,

    dx=0,
    dy=0,
    max_dx=2,
    max_dy=2,
    acc=0.5,
    boost=3,
    extra_boost=1,
    anim=0,
    jumps=0,
    jump_max=2,
    
    running=false,
    jumping=false,
    falling=false,
    sliding=false,
    landed=false,
  }
  
  owl={
    x=28*8,
    y=5*8+3,
    w=8,
    h=8,
    s=50,
    anim=0,
    hoot=false,
  }
  
  duck={
    x=29*8,
    y=9*8,
    w=8,
    h=8,
    s=48,
    flipped=true,
  }
  
  gravity=0.3
  friction=0.75
  
  cx=0
  cy=0
  
  map_x=0
  map_w=1024
  
  debug = false
  dbg_plr_col_x1=0
  dbg_plr_col_y1=0
  dbg_plr_col_x2=0
  dbg_plr_col_y2=0
  dbg_plr_col_up=""
  dbg_plr_col_down=""
  dbg_plr_col_left=""
  dbg_plr_col_right=""

  music(0)
  menuitem(1, "toggle debug", function() toggle_debug() end)
end

function toggle_debug()
  debug = not debug
end

-->8
-- game loops

function _update()
  update_player()
  update_owl()
  update_duck()

  check_collisions()

  animate_player()
  animate_owl()
  animate_duck()
  
  cx=plr.x-64
end


function _draw()
  cls(0)

  -- clamp camera to map
  if cx<map_x then
    cx=map_x
  end
  if cx>map_w-128 then
    cx=map_w-128
  end
  
  -- reset player if falling
  if plr.y>140 then
    plr.x=78*8
    plr.y=11*8
  end
  
  -- back trees
  camera(0, 0)
  pal(2, 1)
  pal(1, 0)
  map(10, 47, 10-flr(cx/3), 0, 80, 16)
  pal()
  
  -- fore trees
  camera(0, 0)
  map(0, 47, 40-flr(cx/2), 0, 47, 16)

  -- owl
  pal(0, false)
  pal(5, true)
  spr(owl.s, owl.x-flr(cx/2), owl.y)
  pal()
  draw_owl()
  
  -- platform map
  camera(cx, cy)
  map(0,0)

  -- player
  camera(cx, cy)
  spr(plr.s, plr.x, plr.y, 
      1, 1, plr.flipped)

  -- platform map foreground
  camera(cx, cy)
  map(0,0,0,0,128,16, 0x80)

  -- duck
  spr(duck.s, duck.x, duck.y, 
      1, 1, duck.flipped)
      
  -- stats
  -- +80 to follow camera
  print("gate "..flr((cx+80)/128)+1, cx+100, 2, 12)
    
  if debug then
    rect(dbg_plr_col_x1, dbg_plr_col_y1,
         dbg_plr_col_x2, dbg_plr_col_y2,
         7)
    print(dbg_plr_col_up, plr.x, plr.y-8, 7)
    print(dbg_plr_col_down, plr.x, plr.y+plr.h+4, 7)
    print(dbg_plr_col_left, plr.x-10, plr.y+2, 7)
    print(dbg_plr_col_right, plr.x+plr.w+2, plr.y+2, 7)

    local px=cx+2
    print("x="..plr.x.." y="..plr.y, 
          px, 2, 6)
    print("dx="..plr.dx.." dy="..plr.dy, 
          px, 8, 6)
    print("cx="..cx.." cy="..cy, 
          px, 14, 6)
          
    if plr.running then
      print("running", px, 20, 6)
    elseif plr.sliding then
      print("sliding", px, 20, 6)
    else
      print("stopped", px, 20, 6)
    end

    if plr.falling then
      print("falling", px, 26, 6)
    elseif plr.jumping then
      print("jumping "..plr.jumps, px, 26, 6)
    elseif plr.landed then
      print("landed", px, 26, 6)
    end
  end
end
-->8
-- player controls

function update_player()
  -- ==============
  -- apply physics
  plr.dy+=gravity
  plr.dx*=friction
  
  -- ========
  -- controls
  if btn(0) then
    plr.dx-=plr.acc
    plr.running=true
    plr.flipped=true
  end
  if btn(1) then
    plr.dx+=plr.acc
    plr.running=true
    plr.flipped=false
  end
  
  -- check slide
  if plr.running 
    and not btn(0)
    and not btn(1)
    and not plr.falling
    and not plr.jumping
  then
    plr.running=false
    plr.sliding=true
  end
  
  -- jump
  if btnp(5) then
    if plr.landed then
      -- first jump
      sfx(5)
      plr.dy-=plr.boost
      plr.landed=false
    end 
    if plr.jumps<plr.jump_max then
      -- double jump(s)
      sfx(5)
      plr.dy-=plr.extra_boost
      plr.landed=false
      plr.jumps+=1
    end
  end
  
  -- ==========
  -- collisions
  dbg_plr_col_up=""
  dbg_plr_col_down=""
  dbg_plr_col_left=""
  dbg_plr_col_right=""
  
  if plr.dy>0 then
    -- moving down
    plr.falling=true
    plr.landed=false
    plr.jumping=false
    
    plr.dy=limit_speed(plr.dy, plr.max_dy)
    
    if map_collision(plr, 3, 3) then
      plr.landed=true
      plr.jumps=0
      plr.falling=false
      plr.dy=0
      -- the extra +1/-1 is to avoid
      -- warping onto tiles, see
      -- nerdyteachers.com/explain/platformer 
      -- sectoni 4-c
      plr.y-=((plr.y+plr.h+1)%8)-1
      dbg_plr_col_down="⬇️"
    end
  elseif plr.dy<0 then
    -- moving up
    plr.jumping=true
    if map_collision(plr, 2, 0) then
      plr.dy=0
      dbg_plr_col_up="⬆️"
    end
  end
  
  if plr.dx<0 then
    -- moving left
    plr.dx=limit_speed(plr.dx, plr.max_dx)
    if map_collision(plr, 0, flg) then
      plr.dx=0
      dbg_plr_col_left="⬅️"
    end
  elseif plr.dx>0 then
    -- moving right
    plr.dx=limit_speed(plr.dx, plr.max_dx)
    if map_collision(plr, 1, flg) then
      plr.dx=0
      dbg_plr_col_right="➡️"
    end
  end
  
  -- slide check
  if plr.sliding then
    if abs(plr.dx)<0.2 
      or plr.running
    then
      plr.dx=0
      plr.sliding=false
      plr.running=false
    end
  end
  
  -- move
  plr.x+=plr.dx
  plr.y+=plr.dy
  
  -- bind to map
  if plr.x<map_x then
    plr.x=map_x
  end
  if plr.x>map_w-plr.w then
    plr.x=map_w-plr.w
  end
end

function animate_player()
  if plr.jumping then
    plr.s=9
  elseif plr.falling then
    plr.s=10
  elseif plr.sliding then
    plr.s=11
  elseif plr.running then
    if time() - plr.anim>0.1 then
      plr.anim=time()
      if plr.s<4 then
        plr.s=4
      else
        plr.s+=1
      end
      if plr.s>8 then
        plr.s=5
      end
    end
  else
    if time() - plr.anim>0.3 then
      plr.anim=time()
      plr.s+=1
      if plr.s>4 then
        plr.s=1
      end
    end
  end
end

function limit_speed(num, max_n)
  return mid(-max_n, num, max_n)
end
-->8
-- collision functions

function map_collision(obj, dir, flag)
  -- takes a obj{x,y,h,w}
  -- dir 0-3 like btn directions
  -- flag map tile flag to check
  
  local x=obj.x
  local y=obj.y
  local h=obj.h
  local w=obj.w
  
  local x1=0
  local y2=0
  local x2=0
  local y2=0
  
  -- these +1/-1 are fairly
  -- specific to player dimensions
  -- and not all sprites
  if dir==0 then
    -- left
    x1=x-1
    y1=y
    x2=x
    y2=y+h-1
  elseif dir==1 then
    -- right
    x1=x+w-1
    y1=y
    x2=x+w
    y2=y+h-1
  elseif dir==2 then
    -- up
    x1=x+1 
    y1=y-1
    x2=x+w-2
    y2=y
  elseif dir==3 then
    -- down
    x1=x+2
    y1=y+h
    x2=x+w-1
    y2=y+h
  end
  
  dbg_plr_col_x1=x1
  dbg_plr_col_y1=y1
  dbg_plr_col_x2=x2
  dbg_plr_col_y2=y2

  -- to map tile coords
  x1/=8
  y1/=8
  x2/=8
  y2/=8
  if fget(mget(x1,y1), flag)
    or fget(mget(x1,y2), flag)
    or fget(mget(x2,y1), flag)
    or fget(mget(x2,y2), flag)
  then
    return true
  end
  
  return false
end

function obj_aabb_collision(obj_a, obj_b)
  -- takes two obj{x,y,h,w}
  -- and checks collision
  -- return dir (0/1/2/3)
  -- obj_a to obj_a
  local ax1=obj_a.x
  local ay1=obj_a.y
  local ax2=ax1+obj_a.w
  local ay2=ay1+obj_a.h
 
  local bx1=obj_b.x
  local by1=obj_b.y
  local bx2=bx1+obj_b.w
  local by2=by1+obj_b.h  

  if ax1<bx2
    and ax2>bx1
    and ay1<by2
    and ay2>by1
  then
    return true
  end
  
  return false
end
-->8
-- gameplay

function check_collisions()
  local tmp_owl={
    x=owl.x,
    y=owl.y,
    w=owl.w,
    h=owl.h
  }
  tmp_owl.x+=flr(cx/2)
  if obj_aabb_collision(plr, tmp_owl) then
    if stat(49) != 3 then
      sfx(3, 3)
    end
    if plr.jumping then
      owl.hoot=true
      owl.anim=time()
    end
  end
  
  if obj_aabb_collision(plr, duck) then

    if plr.falling then
      -- duck kill
      if stat(49) != 4 then
        sfx(4, 3)
      end
      duck.x=-100
      duck.y=-100
    else
      -- duck impact
      if stat(49) != 3 then
        sfx(3, 3)
      end
    end
  end
end
-->8
-- game objects not player

function update_owl()
end

function animate_owl()
  if time()>owl.anim+1 then
    owl.hoot=false
  end
end

function draw_owl()
  if owl.hoot then
    print("hoot", owl.x-flr(cx/2)+12, owl.y-6, 5)
  end
end

function update_duck()
  if plr.x<duck.x then
    duck.flipped=true
  else
    duck.flipped=false
  end
end

function animate_duck()
end
-->8
-- graphics

function rspr1(s,w,h,dx,dy,a,f)
 -- a = angle 0-1, 0 = baseline
 -- f = flip
 sx=flr(s*8)%128
 sy=flr(s/16)*8
 printh("rspr1 sx="..sx.." sy="..sy)
 sw=(w or 1)*8
 sh=(h or 1)*8
 f=f and -1 or 1
 a*=f
 a+=.25
 local sina8=sin(a)>>3 --equivalent to sin(a)/8, but faster
 local cosa8=cos(a)>>3
 sx>>=3 --since only used as sx/8 in loop, might as well change these variables as well
 sy>>=3
 for i=-sh,sh do
  tline(dx-sh*f,dy+i,
        dx+sh*f,dy+i,
        sw*sina8+i*cosa8+sx,
        sw*cosa8-i*sina8+sy,
        -sina8,-cosa8,1)
 end
end

function rspr2(s,w,h,x,y,a,tc,f)
 sw=(w or 1)*8
 sh=(h or 1)*8
 sx=flr(s*8)%128
 sy=flr(s/16)*8
 x0=flr(0.5*sw)
 y0=flr(0.5*sh)
 printh("rspr2 s="..s.." sx="..sx.." sy="..sy.." sw="..(sx+sw).." sh="..(sx+sh))
 if sx==0 then
   printh("******** s="..s)
 end
 -- convert degrees to 0..1
 a=a/360
 sa=sin(a)
 ca=cos(a)
 for ix=0,sw do
  for iy=0,sh do
   dx=ix-x0
   dy=iy-y0
   xx=flr(dx*ca-dy*sa+x0)
   yy=flr(dx*sa+dy*ca+y0)
   if (xx>=0 and xx<sw and yy>=0 and yy<sh) then
    local c=sget(sx+xx,sy+yy)
    if c!=tc then
      pset(x+ix,y+iy,c)
    end
   end
  end
 end
end

function rspr3(s,w,x,y,a,tc,flipped)
 sx=flr(s*8)%128
 sy=flr(s/16)*8
    local ca,sa=cos(a),sin(a)
    local srcx,srcy
    local ddx0,ddy0=ca,sa
    local mask=shl(0xfff8,(w-1))
    w*=4
    ca*=w-0.5
    sa*=w-0.5
    local dx0,dy0=sa-ca+w,-ca-sa+w
    w=2*w-1
    for ix=0,w do
        srcx,srcy=dx0,dy0
        for iy=0,w do
            if band(bor(srcx,srcy),mask)==0 then
                local c=sget(sx+srcx,sy+srcy)
                if c!=tc then
                  pset(x+ix,y+iy,c)
                end
            end
            srcx-=ddy0
            srcy+=ddx0
        end
        dx0+=ddx0
        dy0+=ddy0
    end
end
-->8
-- draw a rotated sprite:
--  located at tile (i ,j) in spritesheet, at (x, y) px on screen,
--  spanning on w tiles to the right, h tiles to the bottom
--  (like spr, w and h may be fractional to allow partial sprites, although not tested),
--  optionally flipped on x and y with flags flip_x and flip_y,
--  offset by -(pivot_x, pivot_y) and rotated by angle around this pivot,
--  ignoring transparent_color.
-- it mimics native spr() and therefore doesn't use pico-boots math vectors.
-- unlike spr() though, it takes sprite location coords i, j as first arguments
--  instead of sprite id n, but conversion is trivial.
-- adapted from jihem's spr_r function for "rotating a sprite around its center"
-- https://www.lexaloffle.com/bbs/?pid=52525
-- changes:
-- - replaced 8 with tile_size for semantics (no behavior change)
-- - w and h don't default to 1 since we use this function with sprite_data which already defaults span to (1, 1)
-- - angle is passed directly as pico-8 angle between 0 and 1 (no division by 360, counter-clockwise sign convention)
-- - support flipping
-- - support custom pivot (instead of always rotating around center)
-- - support transparent_color
-- - draw pixels even the farthest from the pivot (e.g. square corner to opposite corner)
--   by identifying target disc
-- - fixed yy<=sh -> yy<sh to avoid drawing an extra line from neighbor sprite
function rspr4(s, w, h, 
               flip_x, flip_y, 
               pivot_x, pivot_y, 
               x, y, 
               angle, transparent_color)
  -- to spare tokens, we don't give defaults to all values like angle = 0 or transparent_color = 0
  --  user should call function with all parameters; if not using angle, we recommend spr()
  --  to reduce cpu


 
  -- precompute pixel values from tile indices: sprite source top-left, sprite size
 local sx=flr(s*8)%128
 local sy=flr(s/16)*8 
  local sw = 8 * w
  local sh = 8 * h

  -- precompute angle trigonometry
  local sa = sin(angle)
  local ca = cos(angle)

  -- in the operations below, we work "inside" pixels as much as possible (offset 0.5 from top-left corner)
  --  then floor coordinates (or let pico-8 functions auto-floor) at the last moment for more symmetrical results
  -- if we work with integers directly, pivot used for rotation and flipping is
  --  inside a pixel not at the cross between 4 pixels (what pico-8 spr flip uses),
  --  causing a slight offset
  -- typical example: flipping a square sprite of span (1, 1) i.e. size (8, 8) and pivot (4, 4)
  --  will preserve its bounding box; same for a 90-degrees rotation

  -- precompute "target disc": where we must draw pixels of the rotated sprite (relative to (x, y))
  -- the image of a rectangle rotated by any angle from 0 to 1 is a disc
  -- when rotating around its center, the disc has radius equal to rectangle half-diagonal
  -- when rotating around an excentered pivot, the disc has a bigger radius, equal to
  --  the distance between the pivot and the farthest corner of the sprite rectangle
  --  i.e. the magnitude of a vector of width: the biggest horizontal distance between pivot and rectangle left or right
  --                                    height: the biggest vertical distance between pivot and rectangle top or bottom
  -- (if pivot is a corner, it is the full diagonal length)
  -- we need to compute this disc radius so we can properly draw the rotated sprite wherever it will "land" on the screen
  -- (if we just draw on the rectangle area where the sprite originally is, we observe rectangle clipping)
  -- actually measure distance between pivot and edge pixel center, so pivot vs 0.5 (start) or sw - 0.5 (end)
  local max_dx = max(pivot_x, sw - pivot_x) - 0.5  -- actually (pivot_x - 0.5, sw - 0.5 - pivot_x) i.e. max horizontal distance from pivot to corner
  local max_dy = max(pivot_y, sh - pivot_y) - 0.5  -- actually (pivot_y - 0.5, sh - 0.5 - pivot_y) i.e. max vertical distance from pivot to corner
  local max_sqr_dist = max_dx * max_dx + max_dy * max_dy
  -- ceil to be sure we reach enough pixels while avoiding fractions
  -- subtract half for symmetrical operations, it's very important as it will affect
  --  the values of dx and dy during the whole iteration
  local max_dist_minus_half = ceil(sqrt(max_sqr_dist)) - 0.5

  -- backward rendering: cover the whole target disc,
  --  and determine which pixel of the source sprite should be represented
  -- it's not trivial to iterate over a disc (you'd need trigonometry)
  --  so instead, iterate over the target disc's bounding box
  -- we work with relative offsets
  for dx = - max_dist_minus_half, max_dist_minus_half do
    for dy = - max_dist_minus_half, max_dist_minus_half do
      -- optimization: we know that nothing should be drawn outside the target disc contained in the bounding box
      --  so only consider pixels inside the target disc
      -- the final source range check more below is the most important
      if dx * dx + dy * dy <= max_sqr_dist then
        -- prepare flip factors
        local sign_x = flip_x and -1 or 1
        local sign_y = flip_y and -1 or 1
        -- compute pixel location on source sprite in spritesheet
        -- this basically a reverse rotation matrix to find which pixel
        --  on the original sprite should be represented

        -- known issue: luamin will remove brackets from expression a + b * (c + d)
        -- so make sure to store b * (c + d) in an intermediate variable
        -- https://github.com/mathiasbynens/luamin/issues/50
        local rotated_dx = sign_x * ( ca * dx + sa * dy)
        local rotated_dy = sign_y * (-sa * dx + ca * dy)

        -- spare a few tokens by not flooring xx and yy
        --  we should semantically, but fortunately sget does auto-floor arguments
        local xx = pivot_x + rotated_dx
        local yy = pivot_y + rotated_dy

        -- make sure to never draw pixels from the spritesheet
        --  that are outside the source sprite
        -- simply check if the source pixel is located in the source sprite rectangle
        if xx >= 0 and xx < sw and yy >= 0 and yy < sh then
          -- get source pixel
          local c = sget(sx + xx, sy + yy)
          -- ignore if transparent color
          if c ~= transparent_color then
            -- set target pixel color to source pixel color
            -- spare a few tokens by not flooring dx and dy, as pset also auto-floors arguments
            pset(x + dx, y + dy, c)
          end
        end
      end
    end
  end
end
__gfx__
00000000000000000000000000000000440440004404400044004400044044000000000044044000004404400000000000000000000000000000000000000000
00000000440440004404400044044000040040000400400004004000040040004404400000400400040040004404400000000000000000000000000000000000
00700700040040000400400004004000044444000444440004444400044444000400400000444440044444000400400000000000000000000000000000000000
00077000044444000444440004444400481811404118184041181840411818400444440004118184411818400444440000000000000000000000000000000000
00077000411818404118184048181140044444000444440004444400044444004118184000444440044444004181814000000000000000000000000000000000
00700700044444000444440004444400004040000004400000444000044440000444440000044000004440000444440000000000000000000000000000000000
00000000004040000040400000404000004040000440020000024000222040000044400000404000004004000040400000000000000000000000000000000000
00000000044044000440440004404400044044000000020000200400000040000204000004040000000400400004040000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000088888888bbbbbbbb0000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000aaf00099939945525525504940000044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00a18a0093393b995525525504940000029294400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000a1a999bbbbbb95522225504940000029292400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000aaa9099bbbbb35208082504940000029292400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a00aa00049993b995201012504940000029292400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaa00000994005210402504944000029292400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaaa00000994005201012504940000029294400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004a400000099405522225504940000044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
bb33b3b33b3b3bb33bb333bb36363663366333364449444494944944444944944449444445496454964544544d44996d6d56556d556d56650000000000000000
33b3434b3434b33bb33b34b43434633663663664944449444449444444449449944449446454964649646645d56454d5d56656d556d555660000000000000000
4343b4343343443444343b43334355344434364349444294f94444944944492449444494556445d644556d5666d5645566d56655556556560000000000000000
344434434444334433444444455433553355454444f94449924f94449449449444f9442955555455554565555555655455556556565555560000000000000000
449349444494444942b9449455545559555955549494494444494444494444449494494455655556565555565555556555555565556d5d5d0000000000000000
44492444924444444444944494554444543494664449444494444944444494494429424465d656556d555655556556d5556556d5d5d565660000000000000000
4944449442494494449244494559249444945555f94424944944429444944494f9444494d555556656556d5556d6556556d65565655566d50000000000000000
944494444429494449444944454449444964494494449444444944494924444494449444555655d55d6555655555555d6555565d6d5556550000000000000000
000b3b3300033633b3b3b0006363600000000000000000000000000000000000000000004944495496444949356d5665356d56656d56556d0000000000000000
0033b4b400336565439b330053963300000000000000000030030b000b00300300000000445444464969444456d55566b6d55566d56656d50000000000000000
0333434b033353564434333055353330000000000000000003b030b030b003b000000000944944d644556d49346556563465565666d566550000000000000000
3bb334433663355334433bb33553366300000000000000000b0030b030b00b000000000049495455554565495655555656555556354565560000000000000000
3434394455353955449343445593535500000000000b3000b30003b003b0b300000000004465555656555554536d5d5d536d5d5d345555650000000000000000
b443944465539555444934bb555935560000000000b33330b030b30bb30bb0300000000065d656556d555655d4d56566d4d56566b36556d50000000000000000
39444494595555954944449459555595003bb3b0033b43b0b03b03b003b0b03b00000000d555556656556d55645566d5645566d336d655650000000000000000
44494449555955599444944b9555955503b44bb33b39433b0b3b30b030b00b3b00000000555655d55d6555653d5556553d5556336455565d0000000000000000
11112122111111121112221211111122111111121111111200000000000000000000000100000000000000000000000000000000000000000000000000000000
11111112111112121122211211111112112111121111111200000000000000002211021000000000000000000000000000000000000000000000000000000000
12111112111111201211211211111122121111201121111200000000210000000001110022000000000000000000000000000000000000000000000000000000
11111122111111201211221211121112121111201112112000000020021221120001000001112000000000000000000000000000000000000000000000000000
11111112111111201211211211112112111111201111212002122010001100010211000000100211000000000000000000000000000000000000000000000000
12111122111121201122111211112112112111121111212021100100000100000100000001000001000000000000000000000000000000000000000000000000
11111112111111201112211211111212111111121111112220010000000010000000000001000000000000000000000000000000000000000000000000000000
11111112111111121111111211111122112111121112112200010000000000000000000000000000000000000000000000000000000000000000000000000000
bb33b3b33b3b3bb33bb3b3bb000b3b33b3b3b3004444444444444444004994004434444444444444003994000000000000000000000000000000000000000000
33b3434b3434b33bb33b34b40b33b4b4439b33b0949999999499999900492400943999999499b999004324000000000000000000000000000000000000000000
4343b4343343443444343b430333434b4434333399499999994999990049440099433999b9493b99004944000000000000000000000000000000000000000000
3444344344443344334244443bb3344334433bb39999999499999994004994009999bb9493999334004b94000000000000000000000000000000000000000000
449349444994944944b94494343439444493434499999429999994290042940093b99429993994230043b4000000000000000000000000000000000000000000
044924449444442444349444b4439424424934bb4444444444494444004994003444444443494434004934000000000000000000000000000000000000000000
00400400002420004004444030200494490000940000000000499400004944000000000000499400004943000000000000000000000000000000000000000000
000000000002000000000000b00000000000000b0000000000449400004994000000000000449400004993000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060600000600000000060000060000060600000006060000060000000000060000000006000006000006060000000000060600000600000000060000060000
06060000060000000006000006000006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00160676001600000000560000060000560676000016067600160000007600160000000056000006000056067600000000160676001600000000560000060000
56067600160000000056000006000056067600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00061676000600000076160000567600060676000006167600060000007600060000007616000056760006067600760000061676000600000076160000567600
06067600060000007616000056760006067600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66060600004600000000066600460076065600006606060000460000000000460000000006660046007606560000007666060600004600000000066600460076
06560000460000000006660046007606560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00160600004666000076160000060000064600000016060000466600000000466600007616000006000006460000000000160600004666000076160000060000
06460000466600007616000006000006460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00362676003600000000060000560000460676000036267600360000007600360000000006000056000046067600000000362676003600000000060000560000
46067600360000000006000056000046067600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00160600003696000066460000460000565600000016060000369600000000369600006646000046000056560000000000160600003696000066460000460000
56560000369600006646000046000056560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00464676004600000000060000060000060666000046467600460000007600460000000006000006000006066600000000464676004600000000060000060000
06067600460000000006000006000006066600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76065600000676960000160000260076165600007606560000067696000000067696000016000026007616560000007676065600000676960000160000260076
16560000067696000016000026007616560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00461600761600000000160066160000060600000046160076160000000076160000000016006616000006060000000000461600761600000000160066160000
06060076160000000016006616000006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00160666003600000096060000067600061676000016066600360000006600360000009606000006760006167600760000160666003600000096060000067600
06166600360000009606000006760006167600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76060600004600000000067600260066560600007606060000460000000000460000000006760026006656060000006676060600004600000000067600260066
56060000460000000006760026006656060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00360600001696760096167600060000160600000036060000169676000000169676009616760006000016060000000000360600001696760096167600060000
16060000169676009616760006000016060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00461696005600000000160000460000060696000046169600560000009600560000000016000046000006069600000000461696005600000000160000460000
06069600560000000016000046000006069600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060600001600000000060096060000065600000006060000160000000000160000000006009606000006560000000000060600001600000000060096060000
06560000160000000006009606000006560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66364600860676000066160000160066160600006636460086067600000086067600006616000016006616060000006666364600860676000066160000160066
16060086067600006616000016006616060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00160600004600000000060076060000560600000016060000460000000000460000000006007606000056060000000000160600004600000000060076060000
56060000460000000006007606000056060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00060600000600000000560000560000060600000006060000060000000000060000000056000056000006060000000000060600000600000000560000560000
06060000060000000056000056000006060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000100000000000000000000101100000001111111211112122100001011000000011111112000000000000000010000101100000001111
00000000000000000000100000000000000000000000100000001111121211111112100000001000000011111212000000000000001010000000100000001111
00000000000000010000100000000000000000100000100000001111112012111112211000001100000011111120000000000cc0ccc1ccc0ccc01100cc001121
0000000000000000100100000000000000000000000110000000111111201111112202122112101011001111112000000000c000c0c10c00c00110101c001112
0000000000000000010100000000000000000000000010000000111111201111111200110001100000001111112000000000c000ccc10c00cc0010000c001111
0000000000000000010100000000000000000010000110000000111121201211112200110001100000001111212000000000c0c0c1c10c10c00110000c001111
0000000000000000000110000000000000000000000010000000111111201111111210001000100000001111112000000000ccc0c0c10c00ccc01000ccc01111
00000000000000001001100000000000000000000000100000001111111211111112100000001000000011111112000000000000000010000000100000001112
00000000000000000000100000000000000000000000100000001111212211111112100001011000000011112122000000000000010110000000100000001111
00000000000000000010100000000000000000000000100000001111111211111212100000001000000011111112000000000000000010000010100000001111
00000000000000000001000000000000000000010000110000001211111211111120211000001100000012111112000000000010000010000001210000001111
00000000000000000001000000000000000000001001001011001111112211111121121221121010110011111122000000000000000110000001021221121111
00000000000000000001000000000000000000000101000000001111111211111120101100011000000011111112000000000000000010000001001100011111
00000000000000000101000000000000000000000101000000001211112211112121101100011000000012111122000000000010000110000101000100001111
00000000000000000001000000000000000000000001100000001111111211111120100010001000000011111112000000000000000010000001000010001111
00000000000000000000100000000000000000001001100000001111111211111112100000001000000011111112000000000000000010000000100000001111
00000000000000000101100000000000000000000000100000001111212211112122100000001000000011111112000000000000010110000101100000001111
00000000000000000000100000000000000000010000100000001111111211111112100000001000000011211112000000000000000010000000100000001111
00000000000000100000100000000000000000100001000000001211111212111112100100001000000012111120000000000010000010100000100000001211
00000000000000000001100000010000000000100001000000201111112211111122100010010000000012111120000000010000000110000001100000001111
00000000000000000000101011000000000000000001021220101111111211111112100001010000000011111120001011000000000010000000100000001111
00000000000000100001110000000000000000010000211001001211112212111122100001010000000011211112010000000010000110100001100000001211
00000000000000000000110000000000000000000000200100001111111211111112100000011000000011111112010000000000000010000000100000001111
00000000000000000000100000000000000000010000100100001111111211111112100010011000000011211112000000000000000010000000100000001111
000000000000000000001000000000000000000001011000000b3b33bb33b3b33b3b3bb3b3b3b300000011111112000000000000000010000101100000001111
0000000000000000001010000000000000000000000010000b33b4b433b3434b3434b33b439b33b0000011211112000000000000001010000000100000001111
0000000000000000000100000000000000000010000010000333434b4343b4343343443444343333000012111120000000000000000100100000210000001111
0000000000000000000100000000000000000000000110003bb33443344434434444334434433bb3000012111120000000200000000100000001121221121111
00000000000000000001000000000000000000000000100034343944449349444994944944934344000011111120021220100000000100000000101100011111
000000000000000001010000000000000000001000011000b44394242449244494444424424934bb000011211112211001000000010100100001100100001111
00000000000000000001000000000000000000000000100030201494114014111124200049001094000011111112200100000000000100000000100010001111
000000000000000000001000000000000000000000001000b000111111121111111210010000100b000011211112000100000000000010000000100000001111
00000000000000000101100000000000000000000000100000001111112211122212100001011000000011111122000000000000000110001110100000001111
00000000000000000000100000000000000000000000100000001111111211222112100000001000000011111112000000000000000010011100100000001111
00000000000000100000100000000000000000010000100000001111112212112112211000001100000011111122000000000000000110100100110000001211
00000000000000000001100000000000000000001001000000001112111212112212021221121010110011121112000000000000100010100110101011001111
00000000000000000000100000000000000000000101000000001111211212112112001100011000000011112112000000000000010010100100100000001111
00000000000000100001100000000000000000000101000000001111211211221112101100011000000011112112000000000000010010011000100000001211
00000000000000000000100000000000000000000001100000001111121211122112100010001000000011111212000000000000001010001100100000001111
00000000000000000000100000000000000000001001100000001111112211111112100000001000000011111122000000000000000110000000100000001111
00000000000000000000100000000000000000000000100000001111111211112122100000001000000011111122000000000000000010000101100000001111
00000000000000010000100000000000000000010000100000001111121211111112100000001000000011111112000000000000001010000000100000001121
00000000000000100001000000000000000000100001000000001111112012111112100100001000000011111122220000000000000100100000100000001211
00000000000000100001000000000000000000100001000000001111112011111122000010010000000011121112011120000000000100000001100000201211
00000000000000000001000000000000000000000001000000001111112011111112000001010000000011112112001002110000000100000000121220101111
00000000000000010000100000000000000000010000100000001111212012111122000001010000000011112112010000010000010100100001211001001121
00000000000000000000100000000000000000000000100000001111112011111112100000011000000011111212010000000000000100000000200100001111
00000000000000010000100000000000000000010000100000001111111211111112100010011000000011111122000000000000000010000000100100001121
000b3b33bb33b3b33b3b3bb3b3b3b300000000000101100000001111111211111112100001011000000011111112000000000000000010000000100000001111
0b33b4b433b3434b3434b33b439b33b0000000000000100000001121111211211112100000001000000011211112000000000001000010010000100000001111
0333434b4343b4343343443444343333000000100000100000001211112012111120211000001000000012111120000000000010000100100001010000001211
3bb33443344434434444334434433bb3000000000001100000001211112012111121121221121000000112111120000000000010000100100001001011001111
34343944449349444994944944934344000000000000100000001111112011111120101100011010110011111120000000000000000100000001000000001111
b44394240449244494444424424934bb000000100001100000001121111211211112101100011100000011211112000000000001000010010000100000001211
30200494004004000024200049000094000000000000100000001111111211111112100010001100000011111112000000000000000010000000100000001111
b000000000000000000210000000000b000000000000100000001121111211211112100000001000000011211112000000000001000010010000100000001111
00000000000000000000100000000000000000001110100000001111212211111112100000001000000011112122000044444444444444444444444400001111
00000000000000000010100000000000000000011100100000001111111211111112100000001000000011111112000094999999949999999499999900001111
00000000000000000001000000000000000000100100210000001211111211211112000100001000000012111112210099499999994999999949999900001111
00000000000000000001000000000000000000100110121221121111112211121121000010010000000011111122021299999994999999949999999400001111
00000000000000000001000000000000000000100100101100011111111211112121000001010000000011111112001199999429999994299999942900001111
00000000000000000101000000000000000000011000100100001211112211112121000001010000000012111122000144494444444444444449444400001111
00000000000000000001000000000000000000001100100010001111111211111122000000011000000011111112000010499400000010000049940000001111
00000000000000000000100000000000000000000000100000001111111211121122100010011000000011111112000000449400000010001044940000001111
00000000000000000000100000000000000000000000100000001111111211111112100001011000000011111112000000499400000010000049940000001111
00000000000000000010100000000000000000000010100000001121111441441212100000001000000011111212000000492401000010000049240000001111
00000000000000000001000000000000000000000001000000001211112411411120101000002100000011111120000000494410000100000049440000001111
00000000000000000001000000000000000100000001000000001211114444411121100000011212211211111120000000499410000100000049940000001111
00000000000000000001000000000010110000000001000000001111148181141120100000001011000111111120000000429400000100000042940000001111
00000000000000000101000000000100000000000101000000001121114444412121101000011001000011112120000000499401000010000149940000001111
00000000000000000001000000000100000000000001000000001111111414111120100000001000100011111120000000494400000010000049440000001111
00000000000000000000100000000000000000000000100000001121114414411112100000001000000011111112000000499401000010000049940000001111
00000000000000000101100000000000000b3b33bb33b3b33b3b3bb3b3b3b3112122100000001000000011111122000000499400000010000149940000001111
000000000000000000001000000000000b33b4b433b3434b3434b33b439b33b11112100000101000000011111112000000492400001010000049240000001111
000000000000001000001000000000000333434b4343b43433434434443433331112100000010100000011111122000000494400000100100049440000001211
000000000000000000011000000000003bb33443344434434444334434433bb31122100000210010110011121112000000499400000100000049941120011111
00000000000000000000100000000000343439444493494449949449449343441112121220110000000011112112000000429400000100000042941012111111
00000000000000100001100000000000b44394240449244494444424424934bb1122211001010000000011112112000000499400010100100049940000011211
00000000000000000000100000000000302004940040140000242111492011941112200100010000000011111212000000494400000100000049440000001111
00000000000000000000100000000000b000000000001000000211111112111b1112100100001000000011111122000000499400000010000049940000001111
00000000000000000101100000000000000000001110100000001111212211112122100001011000000011111112000044444444444444444444444400001111
00000000000000000000100000000000000000011100100000001111111211111112100000001000000011211112000094999999949999999499999900001111
00000000000000100000110000000000000000100100210000001211111212111112101000001000000012111120010099499999994999999949999900001211
00000000000000000001101011001000000000100110121221121111112211111122000000011000000012111120001099999994999999949999999400001111
00000000000000000000100000000000000000100100101100011111111211111112000000001000000011111120000099999429999994299999942900001111
00000000000000100001100000000000000000011000100100001211112212111122001000011000000011211112000044494444444444444449444400001211
00000000000000000000100000000000000000001100100010001111111211111112100000001000000011111112000000499400000010000049940000001111
00000000000000000000100000000000000000000000100000001111111211111112100000001000000011211112000000449400000010000044940000001111
00000000000000000000100000000000000000000101100000001111112211112122100001011000000011111112000000499400000110000149940000001111
00000000000000000010100000000000000000000000100000001111111211111112100000001000000011111212000000492400000010000049240000001111
00000000000000000001010000000000000000100000100000001111112212111112001000001000000011111120220000494400000110100049440000001111
00000000000000000001001011001000000000000001100000001112111211111122000000011000000011111120011120499412211210000049941120001111
00000000000000000001000000000000000000000000100000001111211211111112000000001000000011111120001002429411010110000042941002111111
00000000000000000101000000000000000000100001100000001111211212111122001000011000000011112120010000499401010010100049940000011111
00000000000000000001000000000000000000000000100000001111121211111112000000001000000011111120010000494400101010000049440000001111
00000000000000000000100000000000000000000000100000001111112211111112100000001000000011111112000000499400000110000049940000001111
556d5665000000000000100000000000000000000000100000001111111211111112100009993994000011111112000000399400000010000049940000001111
56d55566000000000010100000000000000000010000100000001121111211111212100093393b99000011111112000000432401000010000049240000001111
5565565600000000000100000000000000000010000100000000121111201111112022109bbbbbb9000011211112000000494410000100000049441000001111
56555556000000000001000000000000000000100001000000001211112011111121111199bbbbb30100111211200000004b9410000100000049940001001111
556d5d5d000000000001000000000000000000000001000000001111112011111120101049993b9900101111212000000043b400000100000042940000101111
d5d56566000000000101000000000000000000010000100000001121111211112121111000099400000011112120000000493401000010000149940000001111
655566d5000000000001000000000000000000000000100000001111111211111120110000099400000011111122000000494300000010000049440000001111
6d555655000000000000100000000000000000010000100000001121111211111112100000009940000011121122000000499301000010000049940000001111
bb33b3b33b3b3bb3bb33b3b33bb333bb3b3b3bb33bb333bbbb33b3b33b3b3bb33bb333bbbb33b3b33b3b3bb33b3b3bb3bb33b3b3bb33b3b3bb33b3b33bb333bb
33b3434b3434b33b33b3434bb33b34b43434b33bb33b34b433b3434b3434b33bb33b34b433b3434b3434b33b3434b33b33b3434b33b3434b33b3434bb33b34b4
4343b434334344344343b43444343b433343443444343b434343b4343343443444343b434343b43433434434334344344343b4344343b4344343b43444343b43
34443443444433443444344333444444444433443344444434443443444433443344444434443443444433444444334434443443344434433444344333444444
44934944449444494493494442b944944494444942b94494449349444494444942b9449444934944449444494494444944934944449349444493494442b94494
44492444924444444449244444349444924444444434944444492444924444444434944444492444924444449244444444492444444924444449244444349444
49444494444944944944449444924449444944944492444949444494444944944492444949444494444944944449449449444494494444944944449444924449
94449444494449449444944449444944494449444944494494449444494449444944494494449444494449444944494494449444944494449444944449444944
44494444444944449494494494944944494449549644494944494494444944449494494444494444444944944449444444494444949449444449444444494444
94444944944449444449444444494444445444464969444444449449944449444449444494444944444494499444494494444944444944449444494494444944
4944449449444494f9444494f9444494944944d644556d494944492449444294f944449449444294494449244944429449444294f94444944944449449444294
44f9442944f94429924f9444924f944449495455554565499449449444f94449924f944444f944499449449444f9444944f94449924f944444f9442944f94449
94944944949449444449444444494444446555565655555449444444949449444449444494944944494444449494494494944944444944449494494494944944
4429424444294244944449449444494465d656556d55565544449449444944449444494444494444444494494449444444494444944449444429424444494444
f9444494f94444944944429449444294d555556656556d5544944494f944249449444294f944249444944494f9442494f944249449444294f9444494f9442494
94449444944494444449444944494449555655d55d65556549244444944494444449444994449444492444449444944494449444444944499444944494449444
494449544549645445496454964544546d56556d556d566596444949964544549644494944494494444944944449444444494494444944944449449444494494
44544446645496466454964649646645d56656d556d5556649694444496466454969444444449449444494499444494444449449444494494444944944449449
944944d6556445d6556445d644556d5666d566555565565644556d4944556d5644556d4949444924494449244944449449444924494449244944492449444924
494954555555545555555455554565555555655656555556554565495545655555456549944944949449449444f9442994494494944944949449449494494494
4465555655655556556555565655555655555565556d5d5d56555554565555565655555449444444494444449494494449444444494444444944444449444444
65d6565565d6565565d656556d555655556556d5d5d565666d5556556d5556556d55565544449449444494494429424444449449444494494444944944449449
d5555566d5555566d555556656556d5556d65565655566d556556d5556556d5556556d554494449444944494f944449444944494449444944494449444944494
555655d5555655d5555655d55d6555656555565d6d5556555d6555655d6555655d65556549244444492444449444944449244444492444444924444449244444

__gff__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000090909090909090909090909090900000d0d1919202080800009090909090000000000000000000000000000000000000909090d190a0a000a0a000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000007370717400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000007675757675760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007575000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000007700007700770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000757600000000000000000000000000000000000000000000000000000000000000000000
7370717400000000000000000000000000000000007700007700770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075757700000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000007675760000000000007700007700770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007575007a00000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000007700770000000000007700007700770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000787800007a00000000000000000000000000000000000000000000000000000000000000000000
0000000073707174000000007700770000000000757675007700770000000000000000000000000000000000000000000000000000000000000000000000000000000000504052005041520000000000000000000000000075790000007a00000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000076757600000000000077000076757575757675760000000000000000005d00000079787900000000000000000000000000797879000000004746460048474800007978790000000000000075757a0000007978790000000000000000000000000079787900000000000000000000000000797879
0000000000000000000000007700770000000000007700007700000000770077000000005d000000005c0000007a007a000000000000000000000000007a007a000000004547480048474500007a007a0000000000007575007a0000007a007a000000000000000000000000007a007a000000000000000000000000007a007a
4d00565756575600003100007a007700000000000077000077000000007700770000005144520000005d0000007a007a000000005500000054000000007a007a000000000000000000000000007a007a0000000000757500007a0000007a007a000000000000000000000000007a007a000000000056575756000000007a007a
4041404241424041424041414040404240414240404142404142414240404142404142414142404041424041424240414240414240414240404142404142404140414142404041424142404041414240404142404142404140414240414142404052000000000000000000504240414041414240404142404142404141424041
48484646595a4745464647454746474545474745474745475949494a4b5a4745474545474748484746474748474547484745474547474848454745474545454745474748484547454745454547474848454745474545454745454745454748484547530000000000000051454745454547474848454745474545454745474545
5949494a4c4d5a4a5a4747464547454747474847474848594c4d4c4d4d4d5a48474648474645454748464846484847464846464747474847474848474648464647474748474748484746484646474847474848474648464647474748474748474748455300000000005147474748474747474847474848474648464647474847
__sfx__
011000200003300000000000000000033000000000000000000330000000000000000003300000000000000000033000000000000000000330000000000000000003300000000000000000033000000000000000
911000203f200000633f20027125000533062530615000000c000000630000027125272252462500000000630c0000006300000000533f200246253f200274253f20000063000003322533215246250006333425
01080000090000a0000b0000b00009000080000500005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800000c0170f050070500d0500e050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01070000102501c0500c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010600000f03500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000001005300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
03 01424344

